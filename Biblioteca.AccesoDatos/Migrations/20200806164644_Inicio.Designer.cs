// <auto-generated />
using System;
using Biblioteca.AccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biblioteca.AccesoDatos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200806164644_Inicio")]
    partial class Inicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Bibliotec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bibliotecs");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Bibliotecario", b =>
                {
                    b.Property<int>("BibliotecarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliotecaId")
                        .HasColumnType("int");

                    b.Property<int?>("BibliotecasId")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BibliotecarioId");

                    b.HasIndex("BibliotecasId");

                    b.ToTable("Bibliotecarios");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Devolucion", b =>
                {
                    b.Property<int>("DevolucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliotecId")
                        .HasColumnType("int");

                    b.Property<int>("BibliotecarioId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("int");

                    b.HasKey("DevolucionId");

                    b.HasIndex("BibliotecId");

                    b.HasIndex("BibliotecarioId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("Devoluciones");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Lector", b =>
                {
                    b.Property<int>("LectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preferencias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimerNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoLector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LectorId");

                    b.ToTable("Lectores");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("Editorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Libro");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Prestamo", b =>
                {
                    b.Property<int>("PrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibliotecId")
                        .HasColumnType("int");

                    b.Property<int>("BibliotecarioId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("LectorId")
                        .HasColumnType("int");

                    b.HasKey("PrestamoId");

                    b.HasIndex("BibliotecId");

                    b.HasIndex("BibliotecarioId");

                    b.HasIndex("LectorId");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.PrestamoLibros", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("int");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("int");

                    b.HasKey("LibroId", "PrestamoId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("DetallePrestamoLibro");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Bibliotecario", b =>
                {
                    b.HasOne("Biblioteca.Negocio.Entidades.Bibliotec", "Bibliotecas")
                        .WithMany("Bibliotecarios")
                        .HasForeignKey("BibliotecasId");
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Devolucion", b =>
                {
                    b.HasOne("Biblioteca.Negocio.Entidades.Bibliotec", "Bibliotec")
                        .WithMany("Devoluciones")
                        .HasForeignKey("BibliotecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Negocio.Entidades.Bibliotecario", "Bibliotecario")
                        .WithMany()
                        .HasForeignKey("BibliotecarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Negocio.Entidades.Prestamo", "Prestamo")
                        .WithMany()
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.Prestamo", b =>
                {
                    b.HasOne("Biblioteca.Negocio.Entidades.Bibliotec", "Bibliotec")
                        .WithMany("Prestamos")
                        .HasForeignKey("BibliotecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Negocio.Entidades.Bibliotecario", "Bibliotecario")
                        .WithMany()
                        .HasForeignKey("BibliotecarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Negocio.Entidades.Lector", "Lector")
                        .WithMany()
                        .HasForeignKey("LectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biblioteca.Negocio.Entidades.PrestamoLibros", b =>
                {
                    b.HasOne("Biblioteca.Negocio.Entidades.Libro", "Libro")
                        .WithMany("LectorLibros")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteca.Negocio.Entidades.Prestamo", "Prestamo")
                        .WithMany("PrestamoLibros")
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
